#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
#ifndef PLAUDDEVICEBASICSDK_SWIFT_H
#define PLAUDDEVICEBASICSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef unsigned char char8_t;
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFAudio;
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import PenBleSDK;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="PlaudDeviceBasicSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

@interface AVAudioPlayer (SWIFT_EXTENSION(PlaudDeviceBasicSDK)) <AVAudioPlayerDelegate>
- (void)audioPlayerDidFinishPlaying:(AVAudioPlayer * _Nonnull)_ successfully:(BOOL)flag;
- (void)audioPlayerDecodeErrorDidOccur:(AVAudioPlayer * _Nonnull)_ error:(NSError * _Nullable)error;
@end

@class NSString;
@class NSCoder;
@class NSBundle;
SWIFT_CLASS("_TtC19PlaudDeviceBasicSDK30PlaudAudioPlayerViewController")
@interface PlaudAudioPlayerViewController : UIViewController <AVAudioPlayerDelegate>
- (nonnull instancetype)initWithFilePath:(NSString * _Nonnull)filePath OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (void)viewWillDisappear:(BOOL)animated;
- (void)audioPlayerDidFinishPlaying:(AVAudioPlayer * _Nonnull)_ successfully:(BOOL)flag;
- (void)audioPlayerDecodeErrorDidOccur:(AVAudioPlayer * _Nonnull)_ error:(NSError * _Nullable)error;
- (void)audioPlayerBeginInterruption:(AVAudioPlayer * _Nonnull)_;
- (void)audioPlayerEndInterruption:(AVAudioPlayer * _Nonnull)_ withOptions:(NSUInteger)_;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

SWIFT_CLASS("_TtC19PlaudDeviceBasicSDK14PlaudBleDevice")
@interface PlaudBleDevice : BleDevice
- (nonnull instancetype)initWithSn:(NSString * _Nonnull)sn OBJC_DESIGNATED_INITIALIZER;
@end

@protocol PlaudDeviceAgentProtocol;
SWIFT_CLASS("_TtC19PlaudDeviceBasicSDK16PlaudDeviceAgent")
@interface PlaudDeviceAgent : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PlaudDeviceAgent * _Nonnull shared;)
+ (PlaudDeviceAgent * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, weak) id <PlaudDeviceAgentProtocol> _Nullable delegate;
/// Current recording file or sync (download) file sessionId
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)initSDKWithHostName:(NSString * _Nonnull)hostName appKey:(NSString * _Nonnull)appKey appSecret:(NSString * _Nonnull)appSecret bindToken:(NSString * _Nonnull)bindToken extra:(NSDictionary<NSString *, NSString *> * _Nonnull)extra SWIFT_METHOD_FAMILY(none);
+ (NSString * _Nonnull)getTestAppKey SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getTestAppSecret SWIFT_WARN_UNUSED_RESULT;
- (void)depairWithClear:(BOOL)clear;
- (void)setDeviceBindingWithToken:(NSString * _Nonnull)token;
/// Start scan
/// @see        stopScan()
/// @see        Callback bleScanResult
- (void)startScan;
/// End scan
/// @see        startScan()
- (void)stopScan;
/// Connect bluetooth device
/// \param bleDevice Wrapped bluetooth device
/// @see    Callback bleConnectState
/// @see    Callback bleBind
///
- (void)connectBleDeviceWithBleDevice:(BleDevice * _Nonnull)bleDevice;
/// Disconnect bluetooth connection
- (void)disconnect;
- (void)tryReconnectLastDevice;
/// Read recorder status, return state and privacy status
/// @see    Callback blePenState
- (void)getState;
/// Read recorder remaining space
/// @see    Callback bleStorage
- (void)getStorage;
/// Wifi sync switch
/// @see    Callback onWifiSyncEnabled
- (void)getWifiSyncEnable;
/// Wifi sync switch
/// \param value 0: off 1: on
///
- (void)setWifiSyncEnableWithValue:(NSInteger)value;
/// Set upload address
/// \param path Upload address
///
- (void)setWifiSyncDomainWithDomain:(NSString * _Nonnull)domain;
- (void)getWifiSyncUrl;
/// Initiate idle sync Wi-Fi test
/// \param wifiIndex Wi-Fi number (4 bytes)
///
- (void)setWifiSyncTestWithWifiIndex:(uint32_t)wifiIndex;
/// Get idle sync Wi-Fi test result
/// \param wifiIndex Wi-Fi number (4 bytes)
///
- (void)getWifiSyncTestResultWithWifiIndex:(uint32_t)wifiIndex;
/// Get battery level status
/// @see    Callback blePowerChange
/// @see    Callback bleChargingState
- (void)getChargingState;
/// Set microphone gain
/// \param value Microphone gain value, range 0 - 30
///
- (void)setMicGainWithValue:(NSInteger)value;
/// Get microphone gain
/// @see    bleMicGain
- (void)readMicGain;
/// Enable U disk mode
/// \param onOff 1 enable; 0 disable
///
- (void)setUDiskModeOnOff:(BOOL)onOff;
- (BOOL)checkIsRecording SWIFT_WARN_UNUSED_RESULT;
/// Start recording
/// If recording starts successfully, need to call syncFile to sync file yourself
/// Can display real-time recording duration through sync file offset
/// @see    Callback bleRecordStart
- (void)startRecord;
/// Stop current recording
/// @see    Callback bleRecordStop
- (void)stopRecord;
- (NSInteger)getCurrentSessionID SWIFT_WARN_UNUSED_RESULT;
/// Pause recording
/// Resume through resumeRecord()
/// @see    Callback bleRecordPause
- (void)pauseRecord;
/// Resume recording
/// @see Callback bleRecordResume
- (void)resumeRecord;
/// Get session list (get file list after a certain sessionId)
/// This command is not available during recording
/// This command is not available in U disk mode
/// \param uid Used to distinguish different commands
///
/// \param sessionId Which file to start syncing from, 0 means sync all
/// @see    Callback bleFileList
///
- (void)getFileListWithStartSessionId:(NSInteger)startSessionId;
/// This command is not available during recording
/// This command is not available in U disk mode
/// \param sessionId File id
/// Query file corresponding to this sessionId (get real-time recording file length after real-time recording ends)
/// @see    Callback bleFileList
///
- (void)getFileWithSessionId:(NSInteger)sessionId;
/// Sync (download) file
/// \param sessionId Recording file unique id
///
/// \param start Recording file start position (bytes)
///
/// \param end Sync to where? Generally pass 0, means sync to file end (bytes)
/// @see    Callback bleSyncFileHead
/// @see    Callback bleSyncFileTail
/// @see    Callback bleData
/// @see    Callback bleDecodeFail
/// @see    Callback bleDataComplete
/// @see    Callback blePcmData
///
- (void)syncFileWithSessionId:(NSInteger)sessionId start:(NSInteger)start end:(NSInteger)end;
/// Download composite file (complete file)
/// @see    Callback bleDownloadFile
- (void)downloadFileWithSessionId:(NSInteger)sessionId outputPath:(NSString * _Nonnull)outputPath;
/// Stop file download
/// @see    Callback bleDownloadFileStop
- (void)stopDownloadFile;
/// End file sync (download)
/// @see    Callback bleSyncFileStop
- (void)stopSyncFile;
/// Delete file
/// \param sessionId Recording file unique id
/// @see    Callback bleDeleteFile
///
- (void)deleteFileWithSessionId:(NSInteger)sessionId;
/// Clear all files
/// @see    Callback bleClearAllFile
- (void)clearAllFiles;
/// Factory reset
/// No callback
- (void)restoreFactory;
/// Get idle sync WiFi configuration
/// \param wifiIndex Wi-Fi number (4 bytes)
///
- (void)getWifiSyncConfigWithWifiIndex:(uint32_t)wifiIndex;
/// Set idle sync WiFi configuration
/// \param operation Operation type 1: add, 2: modify)
///
/// \param wifiIndex Wi-Fi number (4 bytes)
///
/// \param ssid Wi-Fi SSID
///
/// \param password Wi-Fi password
///
- (void)setWifiSyncConfigWithOperation:(NSInteger)operation wifiIndex:(uint32_t)wifiIndex ssid:(NSString * _Nonnull)ssid password:(NSString * _Nonnull)password;
/// Get idle sync WiFi list
- (void)getWifiSyncList;
/// Delete idle sync WiFi configuration
/// \param wifiIndices Array of Wi-Fi numbers to delete (each number is 4 bytes)
///
- (void)deleteWifiSyncConfigWithWifiIndices:(NSArray<NSNumber *> * _Nonnull)wifiIndices;
@end

@interface PlaudDeviceAgent (SWIFT_EXTENSION(PlaudDeviceBasicSDK))
- (void)onBinaryFileReqWithType:(NSInteger)type packageOffset:(NSInteger)packageOffset packageSize:(NSInteger)packageSize endStatus:(NSInteger)endStatus;
- (void)onBinaryFileEndWithResult:(NSInteger)result;
@end

@class BleFile;
@class NSData;
@interface PlaudDeviceAgent (SWIFT_EXTENSION(PlaudDeviceBasicSDK)) <BleAgentProtocol>
- (void)bleScanResultWithBleDevices:(NSArray<BleDevice *> * _Nonnull)bleDevices;
- (void)bleScanOverTime;
- (void)bleAppKeyStateWithResult:(NSInteger)result;
- (void)bleConnectStateWithState:(NSInteger)state;
- (void)bleBindWithSn:(NSString * _Nullable)sn status:(NSInteger)status protVersion:(NSInteger)protVersion timezone:(NSInteger)timezone;
- (void)blePenStateWithState:(NSInteger)state privacy:(NSInteger)privacy keyState:(NSInteger)keyState uDisk:(NSInteger)uDisk findMyToken:(NSInteger)findMyToken hasSndpKey:(NSInteger)hasSndpKey deviceAccessToken:(NSInteger)deviceAccessToken;
- (void)bleStorageWithTotal:(NSInteger)total free:(NSInteger)free duration:(NSInteger)duration;
- (void)blePowerChangeWithPower:(NSInteger)power oldPower:(NSInteger)oldPower;
- (void)bleChargingStateWithIsCharging:(BOOL)isCharging level:(NSInteger)level;
- (void)bleFileListWithBleFiles:(NSArray<BleFile *> * _Nonnull)bleFiles;
- (void)bleDataComplete;
- (void)bleRecordStartWithSessionId:(NSInteger)sessionId start:(NSInteger)start status:(NSInteger)status scene:(NSInteger)scene startTime:(NSInteger)startTime;
- (void)bleRecordStopWithSessionId:(NSInteger)sessionId reason:(NSInteger)reason fileExist:(BOOL)fileExist fileSize:(NSInteger)fileSize;
- (void)bleRecordPauseWithSessionId:(NSInteger)sessionId reason:(NSInteger)reason fileExist:(BOOL)fileExist fileSize:(NSInteger)fileSize;
- (void)bleRecordResumeWithSessionId:(NSInteger)sessionId start:(NSInteger)start status:(NSInteger)status scene:(NSInteger)scene startTime:(NSInteger)startTime;
- (void)bleSyncFileHeadWithSessionId:(NSInteger)sessionId status:(NSInteger)status;
- (void)bleSyncFileTailWithSessionId:(NSInteger)sessionId crc:(NSInteger)crc;
- (void)bleDataWithSessionId:(NSInteger)sessionId start:(NSInteger)start data:(NSData * _Nonnull)data;
- (void)blePcmDataWithSessionId:(NSInteger)sessionId millsec:(NSInteger)millsec pcmData:(NSData * _Nonnull)pcmData isMusic:(BOOL)isMusic;
- (void)bleDecodeFailWithStart:(NSInteger)start;
- (void)bleSyncFileStop;
- (void)bleDeleteFileWithSessionId:(NSInteger)sessionId status:(NSInteger)status;
- (void)bleDepair:(NSInteger)status;
- (void)bleMicGain:(NSInteger)value;
- (void)onSyncIdleWifiConfigReceivedWithIndex:(uint32_t)index ssid:(NSString * _Nonnull)ssid password:(NSString * _Nonnull)password;
- (void)onSyncIdleWifiConfigSetWithResult:(NSInteger)result;
- (void)onSyncIdleWifiListReceivedWithList:(NSArray<NSNumber *> * _Nonnull)list;
- (void)onSyncIdleWifiDeleteResultWithResult:(NSInteger)result;
- (void)onSyncIdleWifiTestStartedWithIndex:(uint32_t)index;
- (void)onSyncIdleWillStartWithSeconds:(NSInteger)seconds;
- (void)onSyncIdleWifiTestResultWithIndex:(uint32_t)index result:(NSInteger)result rawCode:(NSInteger)rawCode;
- (void)bleSyncWhenIdleEnabled:(NSInteger)value;
- (void)bleUDiskErrWithFuncName:(NSString * _Nonnull)funcName;
- (void)bleUpdatePowerLowErr;
- (void)bleDeviceDisconnectErr;
- (void)bleStateWithPowered:(BOOL)powered;
- (void)bleHandshakeWaitWithTimeout:(NSInteger)timeout;
- (void)bleDeviceNameWithName:(NSString * _Nullable)name;
- (void)blePenTimeWithStamp:(NSInteger)stamp timezone:(NSInteger)timezone zoneMin:(NSInteger)zoneMin;
- (void)blePasswordResetWithPassword:(NSInteger)password;
- (void)bleBacklightDuration:(NSInteger)duration;
- (void)bleBacklightBright:(NSInteger)bright;
- (void)bleLanguage:(NSInteger)type;
- (void)bleRecScene:(NSInteger)scene;
- (void)bleRecMode:(NSInteger)mode;
- (void)bleVadSensitivity:(NSInteger)value;
- (void)bleVpuGain:(NSInteger)value;
- (void)bleSwitchHandler:(NSInteger)id;
- (void)bleAutoPowerOff:(NSInteger)value;
- (void)bleRawWaveEnabled:(NSInteger)value;
- (void)bleRecordingAfterDisConnetEnabled:(NSInteger)value;
- (void)bleFindMyState:(NSInteger)value;
- (void)bleVPUCLKState:(NSInteger)value;
- (void)bleStopRecordingAfterCharging:(NSInteger)value;
- (void)bleAutoClear:(BOOL)open;
- (void)bleVad:(BOOL)open;
- (void)bleWiFiOpen:(NSInteger)status :(NSString * _Nonnull)wifiName :(NSString * _Nonnull)wholeName :(NSString * _Nonnull)wifiPass;
- (void)bleWiFiClose:(NSInteger)status;
- (void)bleSetWiFiSsidWithStatus:(NSInteger)status;
- (void)bleGetWiFiSsidWithStatus:(NSInteger)status ssid:(NSString * _Nullable)ssid;
- (void)bleVoiceAbnormalWithStatus:(NSInteger)status;
- (void)bleWebsocketProfile:(NSInteger)type :(NSString * _Nullable)conent;
- (void)bleWebsocketTest:(NSInteger)status;
- (void)bleLedStateOnOff:(NSInteger)onOff;
- (void)bleSetLedStateOnOff:(NSInteger)onOff;
- (void)bleMarkingWithSessionId:(NSInteger)sessionId status:(NSInteger)status markList:(NSArray<NSNumber *> * _Nonnull)markList;
- (void)bleAnglesWithPitchAngle:(float)pitchAngle rollbackAngle:(float)rollbackAngle yawAngle:(float)yawAngle;
- (void)bleFotaResultWithUid:(NSInteger)uid status:(NSInteger)status errmsg:(NSString * _Nullable)errmsg;
- (void)bleFotaPackReqWithUid:(NSInteger)uid start:(NSInteger)start end:(NSInteger)end;
- (void)bleFotaPackFinWithUid:(NSInteger)uid status:(NSInteger)status errmsg:(NSString * _Nullable)errmsg;
- (void)bleOtaDataSendFail;
- (void)bleRateWithLossRate:(double)lossRate rate:(NSInteger)rate instantRate:(NSInteger)instantRate;
- (void)blePrivacyWithPrivacy:(NSInteger)privacy;
- (void)bleClearAllFileWithStatus:(NSInteger)status;
- (void)bleAlarmRecWithStart:(NSInteger)start duration:(NSInteger)duration repeatMode:(NSInteger)repeatMode;
- (void)bleSetActiveWithStatus:(NSInteger)status;
- (void)onResetFindmyResultWithResult:(NSInteger)result;
- (void)onSetSoundPlusTokenResultWithLicenseKey:(NSString * _Nonnull)licenseKey;
- (void)onGetSDFlashCIDResultWithCid:(NSString * _Nonnull)cid;
@end

SWIFT_PROTOCOL("_TtP19PlaudDeviceBasicSDK24PlaudDeviceAgentProtocol_")
@protocol PlaudDeviceAgentProtocol
/// AppKey verification result
/// \param result Verification result 0 temporary 1 success 2 failure
///
- (void)bleAppKeyStateWithResult:(NSInteger)result;
/// Return status
/// \param state Customized according to project (4099(0x00001003) indicates recorder is recording, 1 seems to be recording)
///
/// \param privacy Privacy setting status
///
/// \param keySatte Toggle switch status (new in protocol version 4)
///
/// \param uDisk Whether U disk is enabled
/// Other two parameters are directly placed in BleAgent
///
/// \param scene Current recording scene (0 when not recording)
///
/// \param findMyToken Whether findmy token exists (NotePin device)
///
/// \param hasSndpKey Whether sound plus license token exists
///
/// \param deviceAccessToken Whether device idle sync AccessToken exists
///
/// \param sessionId Current session id (0 when not recording)
///
- (void)blePenStateWithState:(NSInteger)state privacy:(NSInteger)privacy keyState:(NSInteger)keyState uDisk:(NSInteger)uDisk findMyToken:(NSInteger)findMyToken hasSndpKey:(NSInteger)hasSndpKey deviceAccessToken:(NSInteger)deviceAccessToken;
@optional
/// Bluetooth device scan callback
/// \param bleDevices Bluetooth device list
///
- (void)bleScanResultWithBleDevices:(NSArray<BleDevice *> * _Nonnull)bleDevices;
/// Scan timeout end
/// @see startScan
- (void)bleScanOverTime;
/// Bluetooth connection status
/// <ul>
///   <li>
///     Parameters state: 0 disconnected or not connected; 1 connection successful; 2 connection failed
///   </li>
/// </ul>
- (void)bleConnectStateWithState:(NSInteger)state;
/// Connection callback
/// \param status Status, 0: success, >0: rejected 1: Token mismatch 2: Screen project, currently recording, user cannot confirm temporarily 3: Screen project, user manually rejected 255: Recorder not in connection mode, reject handshake request in non-connection mode (unique to Heili three-stage switch) <0 verification failed -1: no SSN -2: network exception -3: server data exception or verification incorrect
///
/// \param protVersion Protocol version number
///
/// \param timezone Current timezone on pen side
///
- (void)bleBindWithSn:(NSString * _Nullable)sn status:(NSInteger)status protVersion:(NSInteger)protVersion timezone:(NSInteger)timezone;
/// Microphone sensitivity
/// \param value 1- 30
///
- (void)bleMicGain:(NSInteger)value;
/// Device space
/// \param total Total space size (bytes)
///
/// \param free Remaining space size (bytes)
///
/// \param duration Recorder’s estimated remaining recording duration (milliseconds)
///
- (void)bleStorageWithTotal:(NSInteger)total free:(NSInteger)free duration:(NSInteger)duration;
/// Battery level change
/// \param power Current battery level
///
/// \param oldPower Previous battery level (used to determine low battery reminders from 20%->19% and 10%->9%)
///
- (void)blePowerChangeWithPower:(NSInteger)power oldPower:(NSInteger)oldPower;
/// Battery level status
/// \param isCharging Whether charger is plugged in 0 not plugged in 1 plugged in (BleDevice has an isCharging property that will be set after this callback, can compare previous value to determine charging status change)
///
/// \param level Battery level 0-100
///
- (void)bleChargingStateWithIsCharging:(BOOL)isCharging level:(NSInteger)level;
/// Get file list callback
/// \param bleFiles File list
///
- (void)bleFileListWithBleFiles:(NSArray<BleFile *> * _Nonnull)bleFiles;
/// Start recording callback
/// \param sessionId Recording file unique id, 0 timezone timestamp, to convert to phone current timestamp need to subtract timezone
///
/// \param start Recorded duration (file offset, bytes) (returns 0 if not recording before; if recording before, returns recorded duration)
///
/// \param status 0: success, >0: failure 1: space full; 2: U disk mode; 3: hardware exception; 4: currently busy; 255: wrong mode (recorder not in recording mode, unique to Heili three-stage switch)
///
/// \param scene Recording mode
///
/// \param startTime Start time
///
- (void)bleRecordStartWithSessionId:(NSInteger)sessionId start:(NSInteger)start status:(NSInteger)status scene:(NSInteger)scene startTime:(NSInteger)startTime;
/// End recording callback
/// \param sessionId Recording file unique id, 0 timezone timestamp, to convert to phone current timestamp need to subtract timezone
///
/// \param reason Reason (others undefined)
/// 1.MMI_REC_STOP_FROM_DEV    /// Device side stop recording
/// 2.MMI_REC_STOP_FROM_APP    /// APP side stop recording
/// 3.MMI_REC_STOP_BY_SPLIT        /// Automatic time slice stop recording
/// 4.MMI_REC_STOP_BY_SWITCH   ///  Switch toggle stop recording)
///
/// \param fileExist Whether file is saved
///
/// \param fileSize File size (if available, bytes)
///
- (void)bleRecordStopWithSessionId:(NSInteger)sessionId reason:(NSInteger)reason fileExist:(BOOL)fileExist fileSize:(NSInteger)fileSize;
/// Recording pause callback
/// \param sessionId Recording file unique id, 0 timezone timestamp, to convert to phone current timestamp need to subtract timezone
///
/// \param reason Reason (currently undefined)
///
/// \param fileExist Whether file is saved
///
/// \param fileSize File size (if available, bytes)
///
- (void)bleRecordPauseWithSessionId:(NSInteger)sessionId reason:(NSInteger)reason fileExist:(BOOL)fileExist fileSize:(NSInteger)fileSize;
/// Recording resume
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     sessionId: Recording file unique id, 0 timezone timestamp, to convert to phone current timestamp need to subtract timezone
///   </li>
///   <li>
///     start: Recorded duration (file offset, bytes) (returns 0 if not recording before; if recording before, returns recorded duration)
///   </li>
///   <li>
///     status: 0: success, >0: failure 1: space full; 2: U disk mode; 3: hardware exception
///   </li>
///   <li>
///     scene: Recording mode (depends on project, version number)
///   </li>
///   <li>
///     startTime: Start time (depends on project, version number)
///   </li>
/// </ul>
- (void)bleRecordResumeWithSessionId:(NSInteger)sessionId start:(NSInteger)start status:(NSInteger)status scene:(NSInteger)scene startTime:(NSInteger)startTime;
/// Sync (download) file start callback
/// \param sessionId File unique id
///
/// \param status Status, 0: success; >0: failure 1: file system currently unavailable 2: file does not exist 3: interrupted
///
- (void)bleSyncFileHeadWithSessionId:(NSInteger)sessionId status:(NSInteger)status;
/// Sync (download) file end
/// \param sessionId File unique id
///
/// \param crc File checksum code, verify file integrity (don’t use after recorder changed to egg file saving)
///
- (void)bleSyncFileTailWithSessionId:(NSInteger)sessionId crc:(NSInteger)crc;
/// Voice data return
/// \param sessionId File id, protocol 7 support
///
/// \param start Data offset in undecoded file (bytes)
///
/// \param data Data (may be ogg data or opus pure audio, determined by firmware)
///
- (void)bleDataWithSessionId:(NSInteger)sessionId start:(NSInteger)start data:(NSData * _Nonnull)data;
/// Return decoded pcm data
/// \param sessionId File id, protocol 7 support
///
/// \param millsec Current voice millisecond value
///
/// \param pcmData Decoded data, will not callback if decoding not required when starting recording; if recording is dual channel, will process to single channel; music mode is dual channel 48k sampling rate, will process to single channel 48k, not usable for recognition
///
/// \param isMusic Is it music mode? Music mode returned pcm is not normal pcm, is 6 shorts take one, used to generate waveform, cannot be used for recognition
///
- (void)blePcmDataWithSessionId:(NSInteger)sessionId millsec:(NSInteger)millsec pcmData:(NSData * _Nonnull)pcmData isMusic:(BOOL)isMusic;
/// Data reception completed
- (void)bleDataComplete;
/// Voice data decoding failed
/// \param start Data offset in undecoded file
///
- (void)bleDecodeFailWithStart:(NSInteger)start;
/// Sync file terminated
- (void)bleSyncFileStop;
/// Sync composite file callback
/// \param sessionId File unique id
///
/// \param sessionId Output file path
///
/// \param status 0 normal -1 error
///
/// \param progress Progress 0-100
///
/// \param tips Tips
///
- (void)bleDownloadFileWithSessionId:(NSInteger)sessionId outputPath:(NSString * _Nonnull)outputPath status:(NSInteger)status progress:(NSInteger)progress tips:(NSString * _Nonnull)tips;
/// Sync file terminated
- (void)bleDownloadFileStop;
/// Delete file
/// \param sessionId Protocol version 7 support
///
/// \param status Status, 0: delete successful; 1: recording not allowed to delete 2: favorited not allowed to delete; 3: playing not allowed to delete
///
- (void)bleDeleteFileWithSessionId:(NSInteger)sessionId status:(NSInteger)status;
/// Unbind
/// \param status 0 success; 1 working 2 upgrading
///
- (void)bleDepair:(NSInteger)status;
- (void)onWifiSyncConfigReceivedWithIndex:(uint32_t)index ssid:(NSString * _Nonnull)ssid password:(NSString * _Nonnull)password;
/// Set idle sync WiFi configuration result
/// \param result Result code (0: success, 1: already exists, 2: device not found for deletion, 3: change not found, 4: operation code exception, 5: queue full, other: other errors)
///
- (void)onWifiSyncConfigSetWithResult:(NSInteger)result;
/// Idle sync WiFi list reception
/// \param list WiFi index list
///
- (void)onWifiSyncListReceivedWithList:(NSArray<NSNumber *> * _Nonnull)list;
/// Idle sync WiFi delete result
/// \param result Result code (0: success, -1: failure)
///
- (void)onWifiSyncDeleteResultWithResult:(NSInteger)result;
/// Idle sync WiFi test start
/// \param index WiFi number
///
- (void)onWifiSyncTestStartedWithIndex:(uint32_t)index;
/// Idle sync about to start
/// \param second Seconds until start
///
- (void)onWifiSyncWillStartWithSeconds:(NSInteger)seconds;
/// Idle sync WiFi test result
/// \param index WiFi number
///
/// \param result Test result: 0, test successful 1, wifi not found 2, Wifi password incorrect 3, Wifi connection failed 4, data transmission failed
///
/// \param rawCode Original error code
///
- (void)onWifiSyncTestResultWithIndex:(uint32_t)index result:(NSInteger)result rawCode:(NSInteger)rawCode;
- (void)onWifiSyncUrlWithUrl:(NSString * _Nonnull)url;
- (void)onSdkCheckPermissionResultWithPass:(BOOL)pass tips:(NSString * _Nonnull)tips;
- (void)onSdkCheckResourceResultWithPass:(BOOL)pass tips:(NSString * _Nonnull)tips;
/// Idle sync
/// \param value 0: off 1: on
///
- (void)onWifiSyncEnabled:(NSInteger)value;
- (void)onCommonMsgChannelWithType:(NSInteger)type value:(NSInteger)value tips:(NSString * _Nonnull)tips;
@end

SWIFT_CLASS("_TtC19PlaudDeviceBasicSDK14PlaudSDKLogger")
@interface PlaudSDKLogger : NSObject
+ (void)logEvent:(NSString * _Nonnull)eventName parameters:(NSDictionary * _Nullable)parameters;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

SWIFT_CLASS("_TtC19PlaudDeviceBasicSDK19PlaudWifiAddingPage")
@interface PlaudWifiAddingPage : UIViewController
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

SWIFT_CLASS("_TtC19PlaudDeviceBasicSDK20PlaudWifiSettingPage")
@interface PlaudWifiSettingPage : UIViewController <PlaudDeviceAgentProtocol>
- (void)bleAppKeyStateWithResult:(NSInteger)_;
- (void)onWifiSyncUrlWithUrl:(NSString * _Nonnull)url;
- (void)blePenStateWithState:(NSInteger)_ privacy:(NSInteger)_ keyState:(NSInteger)_ uDisk:(NSInteger)_ findMyToken:(NSInteger)_ hasSndpKey:(NSInteger)_ deviceAccessToken:(NSInteger)_;
- (void)bleConnectStateWithState:(NSInteger)state;
- (void)onWifiSyncEnabled:(NSInteger)value;
- (void)onWifiSyncListReceivedWithList:(NSArray<NSNumber *> * _Nonnull)list;
- (void)onWifiSyncConfigReceivedWithIndex:(uint32_t)index ssid:(NSString * _Nonnull)ssid password:(NSString * _Nonnull)password;
- (void)onWifiSyncConfigSetWithResult:(NSInteger)result;
- (void)onWifiSyncDeleteResultWithResult:(NSInteger)_;
- (void)onWifiSyncTestResultWithIndex:(uint32_t)index result:(NSInteger)result rawCode:(NSInteger)_;
- (void)viewDidLoad;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)_ context:(void * _Nullable)_;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class UITableView;
@class NSIndexPath;
@class UITableViewCell;
@interface PlaudWifiSettingPage (SWIFT_EXTENSION(PlaudDeviceBasicSDK)) <UITableViewDataSource, UITableViewDelegate>
- (NSInteger)tableView:(UITableView * _Nonnull)_ numberOfRowsInSection:(NSInteger)_ SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)_ heightForRowAtIndexPath:(NSIndexPath * _Nonnull)_ SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end

SWIFT_CLASS("_TtC19PlaudDeviceBasicSDK9TestAgent")
@interface TestAgent : NSObject
/// Singleton
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TestAgent * _Nonnull shared;)
+ (TestAgent * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Whether device is connected (WiFi or Bluetooth)
- (NSString * _Nonnull)testFunc SWIFT_WARN_UNUSED_RESULT;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
