// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64-apple-ios13 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name PlaudDeviceBasicSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1.2
import AVFoundation
import CommonCrypto
import Foundation
import PenBleSDK
@_exported import PlaudDeviceBasicSDK
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers public class PlaudDomainManager {
  public enum Region : Swift.String, Swift.CaseIterable {
    case cn
    case us
    public init?(rawValue: Swift.String)
    public typealias AllCases = [PlaudDeviceBasicSDK.PlaudDomainManager.Region]
    public typealias RawValue = Swift.String
    nonisolated public static var allCases: [PlaudDeviceBasicSDK.PlaudDomainManager.Region] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public static let shared: PlaudDeviceBasicSDK.PlaudDomainManager
  @objc deinit
  public func setAutoLanguageAssociation(_ enabled: Swift.Bool)
  public func isAutoLanguageAssociationEnabled() -> Swift.Bool
  public func setRegion(_ region: PlaudDeviceBasicSDK.PlaudDomainManager.Region)
  public func setRegionForLanguage(_ languageCode: Swift.String)
  public func getCurrentRegion() -> PlaudDeviceBasicSDK.PlaudDomainManager.Region
  public func getCurrentDomain() -> Swift.String
  public func getCurrentBaseURL() -> Swift.String
  public func getDomain(for region: PlaudDeviceBasicSDK.PlaudDomainManager.Region) -> Swift.String
  public func getBaseURL(for region: PlaudDeviceBasicSDK.PlaudDomainManager.Region) -> Swift.String
  public func buildAPIURL(path: Swift.String) -> Swift.String
  public func buildAPIURL(path: Swift.String, for region: PlaudDeviceBasicSDK.PlaudDomainManager.Region) -> Swift.String
  public func buildAPIURL(path: Swift.String, for languageCode: Swift.String) -> Swift.String
  public func getRegionForCurrentLanguage() -> PlaudDeviceBasicSDK.PlaudDomainManager.Region
  public func getCurrentLanguageCode() -> Swift.String
}
public struct PlaudWifiInfo {
  public init(name: Swift.String, password: Swift.String, isConnected: Swift.Bool, index: Swift.UInt32 = 0)
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor @preconcurrency public class PlaudWifiSettingPage : UIKit.UIViewController, PlaudDeviceBasicSDK.PlaudDeviceAgentProtocol {
  @_Concurrency.MainActor @preconcurrency public static func resetTempTestWifiIndex()
  @_Concurrency.MainActor @preconcurrency @objc public func bleAppKeyState(result _: Swift.Int)
  @_Concurrency.MainActor @preconcurrency @objc public func onWifiSyncUrl(url: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc public func blePenState(state _: Swift.Int, privacy _: Swift.Int, keyState _: Swift.Int, uDisk _: Swift.Int, findMyToken _: Swift.Int, hasSndpKey _: Swift.Int, deviceAccessToken _: Swift.Int)
  @_Concurrency.MainActor @preconcurrency @objc public func bleConnectState(state: Swift.Int)
  @_Concurrency.MainActor @preconcurrency @objc public func onWifiSyncEnabled(_ value: Swift.Int)
  @_Concurrency.MainActor @preconcurrency @objc public func onWifiSyncListReceived(list: [Swift.UInt32])
  @_Concurrency.MainActor @preconcurrency @objc public func onWifiSyncConfigReceived(index: Swift.UInt32, ssid: Swift.String, password: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc public func onWifiSyncConfigSet(result: Swift.Int)
  @_Concurrency.MainActor @preconcurrency @objc public func onWifiSyncDeleteResult(result _: Swift.Int)
  @_Concurrency.MainActor @preconcurrency @objc public func onWifiSyncTestResult(index: Swift.UInt32, result: Swift.Int, rawCode _: Swift.Int)
  @_Concurrency.MainActor @preconcurrency public func getWifiTestTips(result: Swift.Int) -> Swift.String
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change _: [Foundation.NSKeyValueChangeKey : Any]?, context _: Swift.UnsafeMutableRawPointer?)
  @objc deinit
  @_Concurrency.MainActor @preconcurrency public func updateWifiListVisibility()
  @_Concurrency.MainActor @preconcurrency public static func testWifiConnection(ssid: Swift.String, password: Swift.String, wifiIndex: Swift.UInt32?, edit: Swift.Bool, completion: @escaping (Swift.Bool, Swift.String) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension PlaudDeviceBasicSDK.PlaudWifiSettingPage : UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_: UIKit.UITableView, numberOfRowsInSection _: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_: UIKit.UITableView, heightForRowAt _: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
public enum SoundCategory {
  case ambient
  case soloAmbient
  case playback
  case record
  case playAndRecord
  public static func == (a: PlaudDeviceBasicSDK.SoundCategory, b: PlaudDeviceBasicSDK.SoundCategory) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
open class Sound {
  public static var playersPerSound: Swift.Int {
    get
    set
  }
  public static var session: any PlaudDeviceBasicSDK.Session
  public static var category: PlaudDeviceBasicSDK.SoundCategory {
    get
    set
  }
  public static var enabled: Swift.Bool {
    get
    set
  }
  public static var playerClass: any PlaudDeviceBasicSDK.Player.Type
  public static var soundsBundle: Foundation.Bundle
  public init?(url: Foundation.URL)
  @objc deinit
  @discardableResult
  public func play(numberOfLoops: Swift.Int = 0, completion: PlaudDeviceBasicSDK.PlayerCompletion? = nil) -> Swift.Bool
  public func stop()
  public func pause()
  @discardableResult
  public func resume() -> Swift.Bool
  public var playing: Swift.Bool {
    get
  }
  public var paused: Swift.Bool {
    get
  }
  @discardableResult
  public func prepare() -> Swift.Bool
  @discardableResult
  public static func play(file: Swift.String, fileExtension: Swift.String? = nil, numberOfLoops: Swift.Int = 0) -> Swift.Bool
  @discardableResult
  public static func play(url: Foundation.URL, numberOfLoops: Swift.Int = 0) -> Swift.Bool
  public static func stop(for url: Foundation.URL)
  public var duration: Foundation.TimeInterval {
    get
  }
  public var volume: Swift.Float {
    get
    set
  }
  public static func stop(file: Swift.String, fileExtension: Swift.String? = nil)
  public static func stopAll()
}
public protocol Player : AnyObject {
  func play(numberOfLoops: Swift.Int, completion: PlaudDeviceBasicSDK.PlayerCompletion?) -> Swift.Bool
  func stop()
  func pause()
  func resume()
  func prepareToPlay() -> Swift.Bool
  init(contentsOf url: Foundation.URL) throws
  var duration: Foundation.TimeInterval { get }
  var volume: Swift.Float { get set }
  var isPlaying: Swift.Bool { get }
}
public typealias PlayerCompletion = (Swift.Bool) -> Swift.Void
extension AVFAudio.AVAudioPlayer : PlaudDeviceBasicSDK.Player, AVFAudio.AVAudioPlayerDelegate {
  public func play(numberOfLoops: Swift.Int, completion: PlaudDeviceBasicSDK.PlayerCompletion?) -> Swift.Bool
  public func resume()
  @objc dynamic public func audioPlayerDidFinishPlaying(_: AVFAudio.AVAudioPlayer, successfully flag: Swift.Bool)
  @objc dynamic public func audioPlayerDecodeErrorDidOccur(_: AVFAudio.AVAudioPlayer, error: (any Swift.Error)?)
}
public protocol Session : AnyObject {
  func setCategory(_ category: AVFAudio.AVAudioSession.Category) throws
}
extension AVFAudio.AVAudioSession : PlaudDeviceBasicSDK.Session {
}
@_inheritsConvenienceInitializers @objc public class PlaudBleDevice : PenBleSDK.BleDevice {
  @objc override public init(sn: Swift.String)
  override public init(peripheral: PenBleSDK.CBPeripheral, rssi: Foundation.NSNumber, manufacturerData: Foundation.Data, localName: Swift.String?)
  @objc deinit
}
@objc public protocol PlaudDeviceAgentProtocol {
  @objc func bleAppKeyState(result: Swift.Int)
  @objc func blePenState(state: Swift.Int, privacy: Swift.Int, keyState: Swift.Int, uDisk: Swift.Int, findMyToken: Swift.Int, hasSndpKey: Swift.Int, deviceAccessToken: Swift.Int)
  @objc optional func bleScanResult(bleDevices: [PenBleSDK.BleDevice])
  @objc optional func bleScanOverTime()
  @objc optional func bleConnectState(state: Swift.Int)
  @objc optional func bleBind(sn: Swift.String?, status: Swift.Int, protVersion: Swift.Int, timezone: Swift.Int)
  @objc optional func bleMicGain(_ value: Swift.Int)
  @objc optional func bleStorage(total: Swift.Int, free: Swift.Int, duration: Swift.Int)
  @objc optional func blePowerChange(power: Swift.Int, oldPower: Swift.Int)
  @objc optional func bleChargingState(isCharging: Swift.Bool, level: Swift.Int)
  @objc optional func bleFileList(bleFiles: [PenBleSDK.BleFile])
  @objc optional func bleRecordStart(sessionId: Swift.Int, start: Swift.Int, status: Swift.Int, scene: Swift.Int, startTime: Swift.Int)
  @objc optional func bleRecordStop(sessionId: Swift.Int, reason: Swift.Int, fileExist: Swift.Bool, fileSize: Swift.Int)
  @objc optional func bleRecordPause(sessionId: Swift.Int, reason: Swift.Int, fileExist: Swift.Bool, fileSize: Swift.Int)
  @objc optional func bleRecordResume(sessionId: Swift.Int, start: Swift.Int, status: Swift.Int, scene: Swift.Int, startTime: Swift.Int)
  @objc optional func bleSyncFileHead(sessionId: Swift.Int, status: Swift.Int)
  @objc optional func bleSyncFileTail(sessionId: Swift.Int, crc: Swift.Int)
  @objc optional func bleData(sessionId: Swift.Int, start: Swift.Int, data: Foundation.Data)
  @objc optional func blePcmData(sessionId: Swift.Int, millsec: Swift.Int, pcmData: Foundation.Data, isMusic: Swift.Bool)
  @objc optional func bleDataComplete()
  @objc optional func bleDecodeFail(start: Swift.Int)
  @objc optional func bleSyncFileStop()
  @objc optional func bleDownloadFile(sessionId: Swift.Int, outputPath: Swift.String, status: Swift.Int, progress: Swift.Int, tips: Swift.String)
  @objc optional func bleDownloadFileStop()
  @objc optional func bleDeleteFile(sessionId: Swift.Int, status: Swift.Int)
  @objc optional func bleDepair(_ status: Swift.Int)
  @objc optional func onWifiSyncConfigReceived(index: Swift.UInt32, ssid: Swift.String, password: Swift.String)
  @objc optional func onWifiSyncConfigSet(result: Swift.Int)
  @objc optional func onWifiSyncListReceived(list: [Swift.UInt32])
  @objc optional func onWifiSyncDeleteResult(result: Swift.Int)
  @objc optional func onWifiSyncTestStarted(index: Swift.UInt32)
  @objc optional func onWifiSyncWillStart(seconds: Swift.Int)
  @objc optional func onWifiSyncTestResult(index: Swift.UInt32, result: Swift.Int, rawCode: Swift.Int)
  @objc optional func onWifiSyncUrl(url: Swift.String)
  @objc optional func onSdkCheckPermissionResult(pass: Swift.Bool, tips: Swift.String)
  @objc optional func onSdkCheckResourceResult(pass: Swift.Bool, tips: Swift.String)
  @objc optional func onWifiSyncEnabled(_ value: Swift.Int)
  @objc optional func onCommonMsgChannel(type: Swift.Int, value: Swift.Int, tips: Swift.String)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class PlaudDeviceAgent : ObjectiveC.NSObject {
  @objc public static let shared: PlaudDeviceBasicSDK.PlaudDeviceAgent
  public var bleAgent: PenBleSDK.BleAgent?
  @objc weak public var delegate: (any PlaudDeviceBasicSDK.PlaudDeviceAgentProtocol)? {
    @objc get
    @objc set
  }
  @objc public func initSDK(hostName: Swift.String, appKey: Swift.String, appSecret: Swift.String, bindToken: Swift.String, extra: [Swift.String : Swift.String] = [:])
  @objc public static func getTestAppKey() -> Swift.String
  @objc public static func getTestAppSecret() -> Swift.String
  @objc public func depair(clear: Swift.Bool = false)
  @objc public func setDeviceBinding(token: Swift.String)
  @objc public func startScan()
  @objc public func stopScan()
  @objc public func connectBleDevice(bleDevice: PenBleSDK.BleDevice)
  @objc public func disconnect()
  @objc public func tryReconnectLastDevice()
  @objc public func getState()
  @objc public func getStorage()
  @objc public func getWifiSyncEnable()
  @objc public func setWifiSyncEnable(value: Swift.Int)
  @objc public func setWifiSyncDomain(domain: Swift.String)
  @objc public func getWifiSyncUrl()
  @objc public func setWifiSyncTest(wifiIndex: Swift.UInt32)
  @objc public func getWifiSyncTestResult(wifiIndex: Swift.UInt32)
  @objc public func getChargingState()
  @objc public func setMicGain(value: Swift.Int)
  @objc public func readMicGain()
  @objc public func setUDiskMode(onOff: Swift.Bool)
  @objc public func checkIsRecording() -> Swift.Bool
  @objc public func startRecord()
  @objc public func stopRecord()
  @objc public func getCurrentSessionID() -> Swift.Int
  @objc public func pauseRecord()
  @objc public func resumeRecord()
  @objc public func getFileList(startSessionId: Swift.Int)
  @objc public func getFile(sessionId: Swift.Int)
  @objc public func syncFile(sessionId: Swift.Int, start: Swift.Int, end: Swift.Int)
  @objc public func downloadFile(sessionId: Swift.Int, outputPath: Swift.String)
  @objc public func stopDownloadFile()
  @objc public func stopSyncFile()
  @objc public func deleteFile(sessionId: Swift.Int)
  @objc public func clearAllFiles()
  @objc public func restoreFactory()
  @objc public func getWifiSyncConfig(wifiIndex: Swift.UInt32)
  @objc public func setWifiSyncConfig(operation: Swift.Int, wifiIndex: Swift.UInt32, ssid: Swift.String, password: Swift.String)
  @objc public func getWifiSyncList()
  @objc public func deleteWifiSyncConfig(wifiIndices: [Swift.UInt32])
  @objc deinit
}
extension PlaudDeviceBasicSDK.PlaudDeviceAgent : PenBleSDK.BleAgentProtocol {
  @objc dynamic public func bleScanResult(bleDevices: [PenBleSDK.BleDevice])
  @objc dynamic public func bleScanOverTime()
  @objc dynamic public func bleAppKeyState(result: Swift.Int)
  @objc dynamic public func bleConnectState(state: Swift.Int)
  @objc dynamic public func bleBind(sn: Swift.String?, status: Swift.Int, protVersion: Swift.Int, timezone: Swift.Int)
  @objc dynamic public func blePenState(state: Swift.Int, privacy: Swift.Int, keyState: Swift.Int, uDisk: Swift.Int, findMyToken: Swift.Int, hasSndpKey: Swift.Int, deviceAccessToken: Swift.Int)
  @objc dynamic public func bleStorage(total: Swift.Int, free: Swift.Int, duration: Swift.Int)
  @objc dynamic public func blePowerChange(power: Swift.Int, oldPower: Swift.Int)
  @objc dynamic public func bleChargingState(isCharging: Swift.Bool, level: Swift.Int)
  @objc dynamic public func bleFileList(bleFiles: [PenBleSDK.BleFile])
  @objc dynamic public func bleDataComplete()
  @objc dynamic public func bleRecordStart(sessionId: Swift.Int, start: Swift.Int, status: Swift.Int, scene: Swift.Int, startTime: Swift.Int)
  @objc dynamic public func bleRecordStop(sessionId: Swift.Int, reason: Swift.Int, fileExist: Swift.Bool, fileSize: Swift.Int)
  @objc dynamic public func bleRecordPause(sessionId: Swift.Int, reason: Swift.Int, fileExist: Swift.Bool, fileSize: Swift.Int)
  @objc dynamic public func bleRecordResume(sessionId: Swift.Int, start: Swift.Int, status: Swift.Int, scene: Swift.Int, startTime: Swift.Int)
  @objc dynamic public func bleSyncFileHead(sessionId: Swift.Int, status: Swift.Int)
  @objc dynamic public func bleSyncFileTail(sessionId: Swift.Int, crc: Swift.Int)
  @objc dynamic public func bleData(sessionId: Swift.Int, start: Swift.Int, data: Foundation.Data)
  @objc dynamic public func blePcmData(sessionId: Swift.Int, millsec: Swift.Int, pcmData: Foundation.Data, isMusic: Swift.Bool)
  @objc dynamic public func bleDecodeFail(start: Swift.Int)
  @objc dynamic public func bleSyncFileStop()
  @objc dynamic public func bleDeleteFile(sessionId: Swift.Int, status: Swift.Int)
  @objc dynamic public func bleDepair(_ status: Swift.Int)
  @objc dynamic public func bleMicGain(_ value: Swift.Int)
  @objc dynamic public func onSyncIdleWifiConfigReceived(index: Swift.UInt32, ssid: Swift.String, password: Swift.String)
  @objc dynamic public func onSyncIdleWifiConfigSet(result: Swift.Int)
  @objc dynamic public func onSyncIdleWifiListReceived(list: [Swift.UInt32])
  @objc dynamic public func onSyncIdleWifiDeleteResult(result: Swift.Int)
  @objc dynamic public func onSyncIdleWifiTestStarted(index: Swift.UInt32)
  @objc dynamic public func onSyncIdleWillStart(seconds: Swift.Int)
  @objc dynamic public func onSyncIdleWifiTestResult(index: Swift.UInt32, result: Swift.Int, rawCode: Swift.Int)
  @objc dynamic public func bleSyncWhenIdleEnabled(_ value: Swift.Int)
  @objc dynamic public func bleUDiskErr(funcName: Swift.String)
  @objc dynamic public func bleUpdatePowerLowErr()
  @objc dynamic public func bleDeviceDisconnectErr()
  @objc dynamic public func bleState(powered: Swift.Bool)
  @objc dynamic public func bleHandshakeWait(timeout: Swift.Int)
  @objc dynamic public func bleDeviceName(name: Swift.String?)
  @objc dynamic public func blePenTime(stamp: Swift.Int, timezone: Swift.Int, zoneMin: Swift.Int)
  @objc dynamic public func blePasswordReset(password: Swift.Int)
  @objc dynamic public func bleBacklightDuration(_ duration: Swift.Int)
  @objc dynamic public func bleBacklightBright(_ bright: Swift.Int)
  @objc dynamic public func bleLanguage(_ type: Swift.Int)
  @objc dynamic public func bleRecScene(_ scene: Swift.Int)
  @objc dynamic public func bleRecMode(_ mode: Swift.Int)
  @objc dynamic public func bleVadSensitivity(_ value: Swift.Int)
  @objc dynamic public func bleVpuGain(_ value: Swift.Int)
  @objc dynamic public func bleSwitchHandler(_ id: Swift.Int)
  @objc dynamic public func bleAutoPowerOff(_ value: Swift.Int)
  @objc dynamic public func bleRawWaveEnabled(_ value: Swift.Int)
  @objc dynamic public func bleRecordingAfterDisConnetEnabled(_ value: Swift.Int)
  @objc dynamic public func bleFindMyState(_ value: Swift.Int)
  @objc dynamic public func bleVPUCLKState(_ value: Swift.Int)
  @objc dynamic public func bleStopRecordingAfterCharging(_ value: Swift.Int)
  @objc dynamic public func bleAutoClear(_ open: Swift.Bool)
  @objc dynamic public func bleVad(_ open: Swift.Bool)
  @objc dynamic public func bleWiFiOpen(_ status: Swift.Int, _ wifiName: Swift.String, _ wholeName: Swift.String, _ wifiPass: Swift.String)
  @objc dynamic public func bleWiFiClose(_ status: Swift.Int)
  @objc dynamic public func bleSetWiFiSsid(status: Swift.Int)
  @objc dynamic public func bleGetWiFiSsid(status: Swift.Int, ssid: Swift.String?)
  @objc dynamic public func bleVoiceAbnormal(status: Swift.Int)
  @objc dynamic public func bleWebsocketProfile(_ type: Swift.Int, _ conent: Swift.String?)
  @objc dynamic public func bleWebsocketTest(_ status: Swift.Int)
  @objc dynamic public func bleLedState(onOff: Swift.Int)
  @objc dynamic public func bleSetLedState(onOff: Swift.Int)
  @objc dynamic public func bleMarking(sessionId: Swift.Int, status: Swift.Int, markList: [Swift.UInt32])
  @objc dynamic public func bleAngles(pitchAngle: Swift.Float, rollbackAngle: Swift.Float, yawAngle: Swift.Float)
  @objc dynamic public func bleFotaResult(uid: Swift.Int, status: Swift.Int, errmsg: Swift.String?)
  @objc dynamic public func bleFotaPackReq(uid: Swift.Int, start: Swift.Int, end: Swift.Int)
  @objc dynamic public func bleFotaPackFin(uid: Swift.Int, status: Swift.Int, errmsg: Swift.String?)
  @objc dynamic public func bleOtaDataSendFail()
  @objc dynamic public func bleRate(lossRate: Swift.Double, rate: Swift.Int, instantRate: Swift.Int)
  @objc dynamic public func blePrivacy(privacy: Swift.Int)
  @objc dynamic public func bleClearAllFile(status: Swift.Int)
  @objc dynamic public func bleAlarmRec(start: Swift.Int, duration: Swift.Int, repeatMode: Swift.Int)
  @objc dynamic public func bleSetActive(status: Swift.Int)
  @objc dynamic public func onResetFindmyResult(result: Swift.Int)
  @objc dynamic public func onSetSoundPlusTokenResult(licenseKey: Swift.String)
  @objc dynamic public func onGetSDFlashCIDResult(cid: Swift.String)
}
extension PlaudDeviceBasicSDK.PlaudDeviceAgent {
  public func checkSdkResource()
}
extension UIKit.UIColor {
  convenience public init(hex: Swift.UInt32)
}
@_hasMissingDesignatedInitializers public class PlaudFileUploader {
  public static let shared: PlaudDeviceBasicSDK.PlaudFileUploader
  public var device: PenBleSDK.BleDevice?
  public func uploadRecording(sn: Swift.String, sessionId: Swift.Int, onProgress: @escaping (Swift.Double) -> Swift.Void, completion: @escaping (Swift.Result<[Swift.String : Any], any Swift.Error>) -> Swift.Void)
  public func bindDevice(ownerId: Swift.String, sn: Swift.String, completion: @escaping (Swift.Result<[Swift.String : Any], any Swift.Error>) -> Swift.Void)
  public func unbindDevice(ownerId: Swift.String, sn: Swift.String, completion: @escaping (Swift.Result<[Swift.String : Any], any Swift.Error>) -> Swift.Void)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency public class PlaudWifiAddingPage : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public var completion: ((PlaudDeviceBasicSDK.PlaudWifiInfo?) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public init(isEditing: Swift.Bool = true)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency public func setWifiInfo(name: Swift.String, password: Swift.String = "", wifiIndex: Swift.UInt32?, isConnected: Swift.Bool = false)
  @objc deinit
}
public enum Model : Swift.String {
  case simulator, iPod1, iPod2, iPod3, iPod4, iPod5, iPod6, iPod7, iPad2, iPad3, iPad4, iPadAir, iPadAir2, iPadAir3, iPadAir4, iPadAir5, iPad5, iPad6, iPad7, iPad8, iPad9, iPadMini, iPadMini2, iPadMini3, iPadMini4, iPadMini5, iPadMini6, iPadPro9_7, iPadPro10_5, iPadPro11, iPadPro2_11, iPadPro3_11, iPadPro12_9, iPadPro2_12_9, iPadPro3_12_9, iPadPro4_12_9, iPadPro5_12_9, iPhone4, iPhone4S, iPhone5, iPhone5S, iPhone5C, iPhone6, iPhone6Plus, iPhone6S, iPhone6SPlus, iPhoneSE, iPhone7, iPhone7Plus, iPhone8, iPhone8Plus, iPhoneX, iPhoneXS, iPhoneXSMax, iPhoneXR, iPhone11, iPhone11Pro, iPhone11ProMax, iPhoneSE2, iPhone12Mini, iPhone12, iPhone12Pro, iPhone12ProMax, iPhone13Mini, iPhone13, iPhone13Pro, iPhone13ProMax, iPhoneSE3, iPhone14, iPhone14Plus, iPhone14Pro, iPhone14ProMax, AppleWatch1, AppleWatchS1, AppleWatchS2, AppleWatchS3, AppleWatchS4, AppleWatchS5, AppleWatchSE, AppleWatchS6, AppleWatchS7, AppleTV1, AppleTV2, AppleTV3, AppleTV4, AppleTV_4K, AppleTV2_4K, unrecognized
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor @preconcurrency public var type: PlaudDeviceBasicSDK.Model {
    get
  }
  @_Concurrency.MainActor @preconcurrency public static func getOSInfo() -> Swift.String
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency public class PlaudAudioPlayerViewController : UIKit.UIViewController, AVFAudio.AVAudioPlayerDelegate {
  @objc @_Concurrency.MainActor @preconcurrency public init(filePath: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc public func audioPlayerDidFinishPlaying(_: AVFAudio.AVAudioPlayer, successfully flag: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc public func audioPlayerDecodeErrorDidOccur(_: AVFAudio.AVAudioPlayer, error: (any Swift.Error)?)
  @_Concurrency.MainActor @preconcurrency @objc public func audioPlayerBeginInterruption(_: AVFAudio.AVAudioPlayer)
  @_Concurrency.MainActor @preconcurrency @objc public func audioPlayerEndInterruption(_: AVFAudio.AVAudioPlayer, withOptions _: Swift.Int)
  @objc deinit
}
public enum WorkflowStatus : Swift.String, Swift.Codable {
  case pending
  case running
  case progress
  case success
  case failure
  case cancelled
  case timeout
  public var localizedDescription: Swift.String {
    get
  }
  public var isFinished: Swift.Bool {
    get
  }
  public var isSuccess: Swift.Bool {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum WorkflowTaskType : Swift.String, Swift.Codable, Swift.CaseIterable {
  case audioTranscribe
  case aiSummarize
  case aiEtl
  case audioMerge
  case custom
  case unknown
  public var localizedDescription: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias AllCases = [PlaudDeviceBasicSDK.WorkflowTaskType]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [PlaudDeviceBasicSDK.WorkflowTaskType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct WorkflowTaskParams : Swift.Codable {
  public let parameters: [Swift.String : PlaudDeviceBasicSDK.AnyCodable]?
  public init(parameters: [Swift.String : Any]? = nil)
  public init(fileId: Swift.String, language: Swift.String = "en", diarization: Swift.Bool = true, extras: [Swift.String : Any] = [:])
  public init(etlType: Swift.String, extras: [Swift.String : Any] = [:])
  public init(fileIdList: [Swift.String], groupId: Swift.String)
  public init(summaryType: Swift.String, extras: [Swift.String : Any] = [:])
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct WorkflowTask : Swift.Codable {
  public let taskType: PlaudDeviceBasicSDK.WorkflowTaskType
  public let taskParams: [Swift.String : PlaudDeviceBasicSDK.AnyCodable]?
  public init(taskType: PlaudDeviceBasicSDK.WorkflowTaskType, parameters: [Swift.String : Any]? = nil)
  public init(taskType: PlaudDeviceBasicSDK.WorkflowTaskType, taskParams: PlaudDeviceBasicSDK.WorkflowTaskParams)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct WorkflowMetadata : Swift.Codable {
  public let organizationId: Swift.String?
  public let ownerId: Swift.String?
  public let deviceSn: Swift.String?
  public let customData: [Swift.String : PlaudDeviceBasicSDK.AnyCodable]?
  public init(organizationId: Swift.String? = nil, ownerId: Swift.String? = nil, deviceSn: Swift.String? = nil, customData: [Swift.String : Any]? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct WorkflowSubmitRequest : Swift.Codable {
  public let workflows: [PlaudDeviceBasicSDK.WorkflowTask]
  public let metadata: PlaudDeviceBasicSDK.WorkflowMetadata
  public let version: Swift.String
  public init(workflows: [PlaudDeviceBasicSDK.WorkflowTask], metadata: PlaudDeviceBasicSDK.WorkflowMetadata = WorkflowMetadata(), version: Swift.String = "1.0")
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct WorkflowSubmitResponse : Swift.Codable {
  public let id: Swift.String
  public let status: PlaudDeviceBasicSDK.WorkflowStatus
  public var endTime: Swift.String?
  public let updateTime: Swift.String?
  public let fileId: Swift.String?
  public let startTime: Swift.Int64?
  public let version: Swift.String?
  public let ownerId: Swift.String?
  public let metadataJson: [Swift.String : PlaudDeviceBasicSDK.AnyCodable]?
  public let totalTasks: Swift.Int?
  public let completedTasks: Swift.Int?
  public let config: [PlaudDeviceBasicSDK.WorkflowTask]?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct PartialWorkflowStatusResponse : Swift.Codable {
  public let id: Swift.String?
  public let status: Swift.String?
  public let endTime: Swift.String?
  public let updateTime: Swift.String?
  public let fileId: Swift.String?
  public let startTime: Swift.Int64?
  public let version: Swift.String?
  public let ownerId: Swift.String?
  public let metadataJson: [Swift.String : PlaudDeviceBasicSDK.AnyCodable]?
  public let completedTasks: Swift.Int?
  public let totalTasks: Swift.Int?
  public let progress: Swift.Double?
  public let message: Swift.String?
  public let estimatedCompletionTime: Swift.String?
  public let taskStatuses: [Swift.String : Swift.String]?
  public let config: [PlaudDeviceBasicSDK.AnyCodable]?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct WorkflowStatusResponse : Swift.Codable {
  public let id: Swift.String
  public let status: PlaudDeviceBasicSDK.WorkflowStatus
  public let endTime: Swift.String?
  public let updateTime: Swift.String?
  public let fileId: Swift.String?
  public let startTime: Swift.Int64?
  public let version: Swift.String?
  public let ownerId: Swift.String?
  public let metadataJson: [Swift.String : PlaudDeviceBasicSDK.AnyCodable]?
  public let completedTasks: Swift.Int?
  public let totalTasks: Swift.Int?
  public let progress: Swift.Double?
  public let message: Swift.String?
  public let estimatedCompletionTime: Swift.String?
  public let taskStatuses: [Swift.String : PlaudDeviceBasicSDK.WorkflowStatus]?
  public let config: [PlaudDeviceBasicSDK.WorkflowTask]?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct TranscriptSegment : Swift.Codable {
  public let start: Swift.Double
  public let end: Swift.Double
  public let speaker: Swift.String
  public let text: Swift.String
  public let index: Swift.Int?
  public init(start: Swift.Double, end: Swift.Double, speaker: Swift.String, text: Swift.String, index: Swift.Int? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TranscriptResult : Swift.Codable {
  public let segments: [PlaudDeviceBasicSDK.TranscriptSegment]
  public let embeddings: [Swift.String : [Swift.Double]]?
  public let status: Swift.Int?
  public init(segments: [PlaudDeviceBasicSDK.TranscriptSegment], embeddings: [Swift.String : [Swift.Double]]? = nil, status: Swift.Int? = nil)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public var allSpeakers: [Swift.String] {
    get
  }
  public var totalDuration: Foundation.TimeInterval {
    get
  }
  public var textBySpeaker: [Swift.String : Swift.String] {
    get
  }
  public var allText: Swift.String {
    get
  }
  public var hasEmbeddings: Swift.Bool {
    get
  }
  public func getEmbeddings(for speaker: Swift.String) -> [Swift.Double]?
}
public struct CommunicationFeedback : Swift.Codable {
  public let highlight: Swift.String?
  public let suggestion: Swift.String?
  public init(highlight: Swift.String? = nil, suggestion: Swift.String? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DealIntention : Swift.Codable {
  public let description: Swift.String?
  public let rating: Swift.String?
  public init(description: Swift.String? = nil, rating: Swift.String? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DealReason : Swift.Codable {
  public let description: Swift.String?
  public let reason: [Swift.String]?
  public init(description: Swift.String? = nil, reason: [Swift.String]? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct NoDealReason : Swift.Codable {
  public let description: Swift.String?
  public let suggestion: Swift.String?
  public let reason: [Swift.String]?
  public init(description: Swift.String? = nil, suggestion: Swift.String? = nil, reason: [Swift.String]? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DealAnalysis : Swift.Codable {
  public let status: Swift.String?
  public let intention: PlaudDeviceBasicSDK.DealIntention?
  public let dealReason: PlaudDeviceBasicSDK.DealReason?
  public let noDealReason: PlaudDeviceBasicSDK.NoDealReason?
  public init(status: Swift.String? = nil, intention: PlaudDeviceBasicSDK.DealIntention? = nil, dealReason: PlaudDeviceBasicSDK.DealReason? = nil, noDealReason: PlaudDeviceBasicSDK.NoDealReason? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AIEtlResult : Swift.Codable {
  public let assessmentTreatmentPairs: [PlaudDeviceBasicSDK.AnyCodable]?
  public let appellation: Swift.String?
  public let communicationFeedback: PlaudDeviceBasicSDK.CommunicationFeedback?
  public let clinicalReport: Swift.String?
  public let mapped: [Swift.String : PlaudDeviceBasicSDK.AnyCodable]?
  public let transcription: PlaudDeviceBasicSDK.TranscriptResult?
  public let summary: Swift.String?
  public let customerProjects: [PlaudDeviceBasicSDK.AnyCodable]?
  public let unmapped: [PlaudDeviceBasicSDK.AnyCodable]?
  public let dealAnalysis: PlaudDeviceBasicSDK.DealAnalysis?
  public let doctorProjects: [PlaudDeviceBasicSDK.AnyCodable]?
  public let content: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct AISummaryResult : Swift.Codable {
  public let summary: Swift.String?
  public let keyPoints: [Swift.String]?
  public let actionItems: [Swift.String]?
  public let participants: [Swift.String]?
  public let duration: Swift.String?
  public let template: Swift.String?
  public let model: Swift.String?
  public let content: Swift.String?
  public let status: Swift.String?
  public let result: PlaudDeviceBasicSDK.AISummaryInnerResult?
  public let text: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
  public init(summary: Swift.String?, keyPoints: [Swift.String]?, actionItems: [Swift.String]?, participants: [Swift.String]?, duration: Swift.String?, template: Swift.String?, model: Swift.String?, content: Swift.String?, status: Swift.String?, result: PlaudDeviceBasicSDK.AISummaryInnerResult?, text: Swift.String?)
  public var extractedSummary: Swift.String? {
    get
  }
  public var extractedKeyPoints: [Swift.String]? {
    get
  }
  public var extractedActionItems: [Swift.String]? {
    get
  }
  public var extractedParticipants: [Swift.String]? {
    get
  }
  public var extractedModel: Swift.String? {
    get
  }
  public var extractedLanguage: Swift.String? {
    get
  }
  public var extractedMarkdown: Swift.String? {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct AISummaryInnerResult : Swift.Codable {
  public let status: Swift.String?
  public let result: PlaudDeviceBasicSDK.AISummaryDetailedResult?
  public let text: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AISummaryDetailedResult : Swift.Codable {
  public let summaryId: Swift.String?
  public let selectPromptType: Swift.String?
  public let speakerMapping: [Swift.String]?
  public let usePersona: Swift.Bool?
  public let version: Swift.String?
  public let tokensLens: Swift.Int?
  public let retryCount: Swift.Int?
  public let header: PlaudDeviceBasicSDK.AISummaryHeader?
  public let summary: Swift.String?
  public let aiSuggestion: Swift.String?
  public let language: Swift.String?
  public let markdown: Swift.String?
  public let form: PlaudDeviceBasicSDK.AISummaryForm?
  public let endpoint: Swift.String?
  public let contents: [PlaudDeviceBasicSDK.AISummaryContent]?
  public let model: Swift.String?
  public let textLens: Swift.Int?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AISummaryHeader : Swift.Codable {
  public let category: Swift.String?
  public let industryCategory: Swift.String?
  public let languageCode: Swift.String?
  public let keywords: [Swift.String]?
  public let recommendQuestions: [PlaudDeviceBasicSDK.AISummaryQuestion]?
  public let summaryType: Swift.String?
  public let originalCategory: Swift.String?
  public let summaryId: Swift.String?
  public let headline: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AISummaryQuestion : Swift.Codable {
  public let question: Swift.String?
  public let category: Swift.String?
  public let mainPurpose: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AISummaryForm : Swift.Codable {
  public let arrangements: Swift.String?
  public let info: Swift.String?
  public let location: Swift.String?
  public let aiSuggestions: Swift.String?
  public let insertMore: Swift.String?
  public let notes: Swift.String?
  public let conclusion: Swift.String?
  public let dateTime: Swift.String?
  public let attendees: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AISummaryContent : Swift.Codable {
  public let speakerNameMapping: [Swift.String]?
  public let arrangements: [Swift.String]?
  public let topics: [PlaudDeviceBasicSDK.AISummaryTopic]?
  public let theme: Swift.String?
  public let aiSuggestion: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AISummaryTopic : Swift.Codable {
  public let topic: Swift.String?
  public let conclusion: Swift.String?
  public let description: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct PartialWorkflowResultResponse : Swift.Codable {
  public let id: Swift.String?
  public let status: Swift.String?
  public let metadata: [Swift.String : PlaudDeviceBasicSDK.AnyCodable]?
  public let results: [Swift.String : PlaudDeviceBasicSDK.AnyCodable]?
  public let taskResults: [Swift.String : PlaudDeviceBasicSDK.AnyCodable]?
  public let completedAt: Swift.String?
  public let duration: Swift.Double?
  public let message: Swift.String?
  public let progress: Swift.Double?
  public let estimatedCompletionTime: Swift.String?
  public let taskStatuses: [Swift.String : Swift.String]?
  public let tasks: [PlaudDeviceBasicSDK.AnyCodable]?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum WorkflowResult<T> {
  case success(T)
  case failure(any Swift.Error)
}
public enum WorkflowError : Swift.Error, Foundation.LocalizedError {
  case invalidURL
  case networkError(any Swift.Error)
  case invalidResponse
  case serverError(Swift.String)
  case workflowNotFound
  case workflowFailed(Swift.String)
  case timeout
  case noApiToken
  case urlBuildFailed(Swift.String)
  public var errorDescription: Swift.String? {
    get
  }
}
@_hasMissingDesignatedInitializers public class PlaudWorkflowManager {
  public static let shared: PlaudDeviceBasicSDK.PlaudWorkflowManager
  public func submitWorkflow(_ request: PlaudDeviceBasicSDK.WorkflowSubmitRequest, completion: @escaping (PlaudDeviceBasicSDK.WorkflowResult<PlaudDeviceBasicSDK.WorkflowSubmitResponse>) -> Swift.Void)
  public func getWorkflowStatus(_ workflowId: Swift.String, completion: @escaping (PlaudDeviceBasicSDK.WorkflowResult<PlaudDeviceBasicSDK.WorkflowStatusResponse>) -> Swift.Void)
  public func getWorkflowResults(_ workflowId: Swift.String, completion: @escaping (PlaudDeviceBasicSDK.WorkflowResult<PlaudDeviceBasicSDK.WorkflowResultResponse>) -> Swift.Void)
  public func submitAndWaitForCompletion(_ request: PlaudDeviceBasicSDK.WorkflowSubmitRequest, timeout: Foundation.TimeInterval = 3600.0, progressHandler: ((PlaudDeviceBasicSDK.WorkflowStatusResponse) -> Swift.Void)? = nil, completion: @escaping (PlaudDeviceBasicSDK.WorkflowResult<PlaudDeviceBasicSDK.WorkflowResultResponse>) -> Swift.Void)
  public func pollWorkflowStatus(workflowId: Swift.String, timeout: Foundation.TimeInterval, progressHandler: ((PlaudDeviceBasicSDK.WorkflowStatusResponse) -> Swift.Void)? = nil, completion: @escaping (PlaudDeviceBasicSDK.WorkflowResult<PlaudDeviceBasicSDK.WorkflowResultResponse>) -> Swift.Void)
  @objc deinit
}
extension PlaudDeviceBasicSDK.PlaudWorkflowManager {
  public func createAudioTranscribeWorkflow(fileId: Swift.String, language: Swift.String = "en", diarization: Swift.Bool = true, transcriptType: Swift.String? = nil, completion: @escaping (PlaudDeviceBasicSDK.WorkflowResult<PlaudDeviceBasicSDK.WorkflowSubmitResponse>) -> Swift.Void)
  public func createAIEtlWorkflow(etlType: Swift.String, extras: [Swift.String : Any] = [:], completion: @escaping (PlaudDeviceBasicSDK.WorkflowResult<PlaudDeviceBasicSDK.WorkflowSubmitResponse>) -> Swift.Void)
  public func createAudioMergeWorkflow(fileIdList: [Swift.String], groupId: Swift.String, completion: @escaping (PlaudDeviceBasicSDK.WorkflowResult<PlaudDeviceBasicSDK.WorkflowSubmitResponse>) -> Swift.Void)
  public func createTranscribeAndAnalysisWorkflow(fileId: Swift.String, language: Swift.String = "en", diarization: Swift.Bool = true, transcriptType: Swift.String? = nil, etlType: Swift.String, completion: @escaping (PlaudDeviceBasicSDK.WorkflowResult<PlaudDeviceBasicSDK.WorkflowSubmitResponse>) -> Swift.Void)
  public func createMergeAndAnalysisWorkflow(fileIdList: [Swift.String], groupId: Swift.String, etlType: Swift.String, completion: @escaping (PlaudDeviceBasicSDK.WorkflowResult<PlaudDeviceBasicSDK.WorkflowSubmitResponse>) -> Swift.Void)
  public func doAudioTranscribeWorkflow(fileId: Swift.String, language: Swift.String = "en", diarization: Swift.Bool = true, transcriptType: Swift.String? = nil, timeout: Foundation.TimeInterval = 3600.0, progressHandler: ((PlaudDeviceBasicSDK.WorkflowStatusResponse) -> Swift.Void)? = nil, completion: @escaping (PlaudDeviceBasicSDK.WorkflowResult<PlaudDeviceBasicSDK.WorkflowResultResponse>) -> Swift.Void)
  public func doTranscribeAndAnalysisWorkflow(fileId: Swift.String, language: Swift.String = "en", diarization: Swift.Bool = true, transcriptType: Swift.String? = nil, etlType: Swift.String, timeout: Foundation.TimeInterval = 3600.0, progressHandler: ((PlaudDeviceBasicSDK.WorkflowStatusResponse) -> Swift.Void)? = nil, completion: @escaping (PlaudDeviceBasicSDK.WorkflowResult<PlaudDeviceBasicSDK.WorkflowResultResponse>) -> Swift.Void)
  public func doTranscribeAndAISummaryWorkflow(fileId: Swift.String, language: Swift.String = "en", diarization: Swift.Bool = true, transcriptType: Swift.String? = nil, templateId: Swift.String = "MEETING", prompt: Swift.String? = nil, model: Swift.String = "openai", startTime: Swift.Int = 0, timeout: Foundation.TimeInterval = 3600.0, progressHandler: ((PlaudDeviceBasicSDK.WorkflowStatusResponse) -> Swift.Void)? = nil, completion: @escaping (PlaudDeviceBasicSDK.WorkflowResult<PlaudDeviceBasicSDK.WorkflowResultResponse>) -> Swift.Void)
  public func doAudioMergeWorkflow(fileIdList: [Swift.String], groupId: Swift.String, timeout: Foundation.TimeInterval = 3600.0, progressHandler: ((PlaudDeviceBasicSDK.WorkflowStatusResponse) -> Swift.Void)? = nil, completion: @escaping (PlaudDeviceBasicSDK.WorkflowResult<PlaudDeviceBasicSDK.WorkflowResultResponse>) -> Swift.Void)
  public func doMergeAndAnalysisWorkflow(fileIdList: [Swift.String], groupId: Swift.String, etlType: Swift.String, timeout: Foundation.TimeInterval = 3600.0, progressHandler: ((PlaudDeviceBasicSDK.WorkflowStatusResponse) -> Swift.Void)? = nil, completion: @escaping (PlaudDeviceBasicSDK.WorkflowResult<PlaudDeviceBasicSDK.WorkflowResultResponse>) -> Swift.Void)
}
extension PlaudDeviceBasicSDK.PlaudDeviceAgent {
  public func sendApiToken(token: Swift.String, callback: @escaping (Swift.Bool, Swift.String) -> Swift.Void)
  public func sendBinaryFile(type: Swift.Int, data: Foundation.Data?, callback: @escaping (Swift.Bool, Swift.String) -> Swift.Void)
  @objc dynamic public func onBinaryFileReq(type: Swift.Int, packageOffset: Swift.Int, packageSize: Swift.Int, endStatus: Swift.Int)
  @objc dynamic public func onBinaryFileEnd(result: Swift.Int)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class TestAgent : ObjectiveC.NSObject {
  @objc public static let shared: PlaudDeviceBasicSDK.TestAgent
  @objc public func testFunc() -> Swift.String
  @objc deinit
}
extension Swift.Array {
  public mutating func appendDistinct<S>(contentsOf newElements: S, where condition: @escaping (Element, Element) -> Swift.Bool) where Element == S.Element, S : Swift.Sequence
}
@_hasMissingDesignatedInitializers public class PlaudLocalizationManager {
  public static let shared: PlaudDeviceBasicSDK.PlaudLocalizationManager
  public func setCustomBundlePath(_ path: Swift.String)
  public func setLanguage(_ language: Swift.String)
  public func getCurrentLanguage() -> Swift.String
  public func checkSDKBundle() -> Swift.Bool
  public func localizedString(for key: Swift.String) -> Swift.String
  @objc deinit
}
extension Swift.String {
  public var plaudLocalized: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class PlaudWorkflowManagerTest {
  public static func runCompleteWorkflowTest()
  public static func testAudioTranscribeWorkflow(fileId: Swift.String)
  public static func testAIEtlWorkflow()
  public static func testTranscribeAndAnalysisWorkflow(fileId: Swift.String, completion: @escaping (Swift.Bool) -> Swift.Void)
  public static func testAudioMergeWorkflow(fileIdList: [Swift.String])
  public static func testMergeAndAnalysisWorkflow(fileId: Swift.String, completion: @escaping (Swift.Bool) -> Swift.Void)
  public static func testCustomWorkflow()
  public static func testJSONParsingFix()
  public static func testDoAudioTranscribeWorkflow(fileId: Swift.String)
  public static func testURLBuilding()
  public static func testWorkflowStatusResponseParsing()
  public static func testNewWorkflowResultResponseParsing()
  public static func testWorkflowResultResponseWithAIEtl()
  public static func testTranscribeAndAISummaryWorkflow()
  public static func testWorkflowResultResponseWithComplexAISummary()
  public static func pollWorkflowCompletion(workflowId _: Swift.String, description: Swift.String, completion: @escaping (Swift.Bool) -> Swift.Void = { _ in })
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PlaudWorkflowManagerExample {
  public static func runAllExamples()
  public static func simpleTranscribeExample()
  public static func batchProcessingExample()
  @objc deinit
}
extension PlaudDeviceBasicSDK.PlaudDeviceAgent {
  public func checkDeviceState(state _: Swift.Int, privacy _: Swift.Int, keyState _: Swift.Int, uDisk _: Swift.Int, findMyToken _: Swift.Int, hasSndpKey _: Swift.Int, deviceAccessToken: Swift.Int)
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public var isCurrentVisible: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency public func currentIS(_ vcClass: Swift.AnyClass) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var currentVCClass: UIKit.UIViewController? {
    get
  }
}
extension UIKit.UINavigationController {
  @_Concurrency.MainActor @preconcurrency public func pushViewController(_ viewController: UIKit.UIViewController, animated: Swift.Bool = true, completion: (() -> Swift.Void)? = nil)
}
@_inheritsConvenienceInitializers @objc public class PlaudSDKLogger : ObjectiveC.NSObject {
  @objc public static func logEvent(_ eventName: Swift.String, parameters: Foundation.NSDictionary? = nil)
  @objc override dynamic public init()
  @objc deinit
}
public struct WorkflowResultResponse : Swift.Codable {
  public let id: Swift.String
  public let status: Swift.String
  public let ownerId: Swift.String?
  public let metadataJson: [Swift.String : PlaudDeviceBasicSDK.AnyCodable]?
  public let fileId: Swift.String?
  public let tasks: [PlaudDeviceBasicSDK.WorkflowTaskResult]
  public let metadata: [Swift.String : PlaudDeviceBasicSDK.AnyCodable]?
  public let results: [Swift.String : PlaudDeviceBasicSDK.AnyCodable]?
  public let taskResults: [Swift.String : PlaudDeviceBasicSDK.AnyCodable]?
  public let completedAt: Swift.String?
  public let duration: Swift.Double?
  public let message: Swift.String?
  public let progress: Swift.Double?
  public let estimatedCompletionTime: Swift.String?
  public let taskStatuses: [Swift.String : Swift.String]?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public var legacyResults: [Swift.String : Any]? {
    get
  }
  public var legacyTaskResults: [Swift.String : Any]? {
    get
  }
  public var legacyCompletedAt: Swift.String? {
    get
  }
  public var legacyDuration: Foundation.TimeInterval? {
    get
  }
  public var legacyProgress: Swift.Double? {
    get
  }
  public var legacyMessage: Swift.String? {
    get
  }
  public var legacyEstimatedCompletionTime: Swift.String? {
    get
  }
  public var legacyTaskStatuses: [Swift.String : Swift.String]? {
    get
  }
  public var firstTranscriptResult: PlaudDeviceBasicSDK.TranscriptResult? {
    get
  }
  public var firstAIEtlResult: PlaudDeviceBasicSDK.AIEtlResult? {
    get
  }
  public var firstAISummaryResult: PlaudDeviceBasicSDK.AISummaryResult? {
    get
  }
  public var allTranscriptText: Swift.String {
    get
  }
  public var transcriptBySpeaker: [Swift.String : Swift.String] {
    get
  }
  public var transcriptTask: PlaudDeviceBasicSDK.WorkflowTaskResult? {
    get
  }
  public var aiEtlTask: PlaudDeviceBasicSDK.WorkflowTaskResult? {
    get
  }
  public var aiSummaryTask: PlaudDeviceBasicSDK.WorkflowTaskResult? {
    get
  }
  public var transcriptDuration: Swift.Int64? {
    get
  }
  public var aiEtlDuration: Swift.Int64? {
    get
  }
  public var aiSummaryDurationSeconds: Swift.Double? {
    get
  }
  public var transcriptDurationSeconds: Swift.Double? {
    get
  }
  public var aiEtlDurationSeconds: Swift.Double? {
    get
  }
  public var isSuccess: Swift.Bool {
    get
  }
  public var segmentCount: Swift.Int {
    get
  }
  public var allSpeakers: [Swift.String] {
    get
  }
  public var speakers: [Swift.String] {
    get
  }
  public var transcriptTotalDuration: Foundation.TimeInterval {
    get
  }
  public var aiEtlSummary: Swift.String? {
    get
  }
  public var aiSummaryText: Swift.String? {
    get
  }
  public var aiSummaryKeyPoints: [Swift.String]? {
    get
  }
  public var aiSummaryActionItems: [Swift.String]? {
    get
  }
  public var aiSummaryParticipants: [Swift.String]? {
    get
  }
  public var aiSummaryTemplate: Swift.String? {
    get
  }
  public var aiSummaryModel: Swift.String? {
    get
  }
  public var aiSummaryDuration: Swift.String? {
    get
  }
  public var aiSummaryHeadline: Swift.String? {
    get
  }
  public var aiSummaryTopics: [PlaudDeviceBasicSDK.AISummaryTopic]? {
    get
  }
  public var clinicalReport: Swift.String? {
    get
  }
  public var dealStatus: Swift.String? {
    get
  }
  public var dealIntentionRating: Swift.String? {
    get
  }
  public var communicationHighlight: Swift.String? {
    get
  }
  public var communicationSuggestion: Swift.String? {
    get
  }
  public var customerAppellation: Swift.String? {
    get
  }
  public var hasAIEtlTask: Swift.Bool {
    get
  }
  public var hasAISummaryTask: Swift.Bool {
    get
  }
  public var hasTranscriptTask: Swift.Bool {
    get
  }
  public var taskTypes: [Swift.String] {
    get
  }
  public var embeddingsData: [Swift.String : [Swift.Double]]? {
    get
  }
  public var hasEmbeddings: Swift.Bool {
    get
  }
  public var transcriptStatusCode: Swift.Int? {
    get
  }
}
public struct WorkflowTaskResult : Swift.Codable {
  public let taskId: Swift.String
  public let taskType: Swift.String
  public let status: Swift.String
  public let startTime: Swift.Int64?
  public let endTime: Swift.Int64?
  public let result: PlaudDeviceBasicSDK.AnyCodable?
  public init(taskId: Swift.String, taskType: Swift.String, status: Swift.String, startTime: Swift.Int64?, endTime: Swift.Int64?, result: PlaudDeviceBasicSDK.AnyCodable?)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public func debugPrintTaskResult()
  public var transcriptResult: PlaudDeviceBasicSDK.TranscriptResult? {
    get
  }
  public var aiEtlResult: PlaudDeviceBasicSDK.AIEtlResult? {
    get
  }
  public var aiSummaryResult: PlaudDeviceBasicSDK.AISummaryResult? {
    get
  }
}
public enum WorkflowParsingError : Swift.Error, Foundation.LocalizedError {
  case missingRequiredField(Swift.String)
  case invalidDataStructure(Swift.String)
  case unsupportedFormat(Swift.String)
  public var errorDescription: Swift.String? {
    get
  }
}
public struct AnyCodable : Swift.Codable {
  public let value: Any
  public init(_ value: Any)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
extension PlaudDeviceBasicSDK.PlaudDeviceAgent {
  public func clearSDKCredentials()
}
extension PlaudDeviceBasicSDK.PlaudDomainManager.Region : Swift.Equatable {}
extension PlaudDeviceBasicSDK.PlaudDomainManager.Region : Swift.Hashable {}
extension PlaudDeviceBasicSDK.PlaudDomainManager.Region : Swift.RawRepresentable {}
extension PlaudDeviceBasicSDK.SoundCategory : Swift.Equatable {}
extension PlaudDeviceBasicSDK.SoundCategory : Swift.Hashable {}
extension PlaudDeviceBasicSDK.Model : Swift.Equatable {}
extension PlaudDeviceBasicSDK.Model : Swift.Hashable {}
extension PlaudDeviceBasicSDK.Model : Swift.RawRepresentable {}
extension PlaudDeviceBasicSDK.WorkflowStatus : Swift.Equatable {}
extension PlaudDeviceBasicSDK.WorkflowStatus : Swift.Hashable {}
extension PlaudDeviceBasicSDK.WorkflowStatus : Swift.RawRepresentable {}
extension PlaudDeviceBasicSDK.WorkflowTaskType : Swift.Equatable {}
extension PlaudDeviceBasicSDK.WorkflowTaskType : Swift.Hashable {}
extension PlaudDeviceBasicSDK.WorkflowTaskType : Swift.RawRepresentable {}
